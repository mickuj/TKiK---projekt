G = (T, V, S, P)

T = { 'if', 'else', 'while', 'for', 'in', 'def', 'print', 'import', 'break', 'continue', 'return', 'false', 'true', 'none', '(', ')', ':', '=', ',', '+', '-', '*', '/', '%', '==', '!=', '<', '>', '<=', '>=', '.', NUM, ID }

V = { program, stmt_list, stmt, if_stmt, while_stmt, for_stmt, func_def, assign_stmt, expr_stmt, expr, param_list, print_stmt, import_stmt, break_stmt, continue_stmt, return_stmt, false_val, true_val, none_val, module, alias, name}

S = program

P = {
      program       → stmt_list
      stmt_list     → stmt stmt_list | ε
      stmt          → if_stmt | while_stmt | for_stmt | func_def | assign_stmt | expr_stmt | print_stmt | import_stmt | break_stmt | continue_stmt | return_stmt | false_val | true_val | none_val
      if_stmt       → 'if' expr ':' stmt_list 'else' ':' stmt_list
      while_stmt    → 'while' expr ':' stmt_list
      for_stmt      → 'for' ID 'in' expr ':' stmt_list
      print_stmt    → 'print' '(' expr ')'
      import_stm    → 'import' module | 'import' module 'as' alias | 'from' module 'import' name
      func_def      → 'def' ID '(' param_list ')' ':' stmt_list
      assign_stmt   → ID '=' expr
      expr_stmt     → expr
      expr          → ID | NUM | expr OP expr | '(' expr ')'
      param_list    → ID (',' ID)* | ε
      break_stmt    → 'break'
      continue_stmt → 'continue'
      return_stmt   → 'return' expr
      false_val     → 'false'
      true_val      → 'true'
      none_val      → 'none'
      module        → ID ('.' ID)*
      alias         → ID
      name          → ID
}
